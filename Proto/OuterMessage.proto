syntax = "proto3";
package ET;

///
/// 消息头结构定义
///
message TMsg 
{
    /// 消息类型
    int32 type = 1;
    /// 消息体
    bytes body = 2;
    
    int32 rpc_id = 3;

    ///
    /// 错误信息：如果消息执行错误，则回复错误编码和描述
    /// error_code = 0 表示成功，否则失败
    ///
    int32 error_code = 4;
    string error_string = 5;
}

///
/// 注册消息
///
//ResponseType register_user_s2c
message register_user_c2s // IRequest
{
    int32 device_type = 1; // 设备类型
    string device_model = 2;   // 设备型号
    string device_product_id = 3;  // 设备产品ID
    string desc = 8;     // 设备描述
	//erlangMogai
}
/// 返回
message register_user_s2c  // IResponse
{
    int32 user_id = 1;    // 用户ID
	//erlangMogai
}

///
/// 获取数据中转服务endpoint
///
//ResponseType get_transfer_endpoint_s2c
message get_transfer_endpoint_c2s  // IRequest
{
    int32 user_id = 1;    // 用户ID
    int32 endpoint_id = 2;    // 端点号
	//erlangMogai
}
/// 返回
message get_transfer_endpoint_s2c // IResponse 
{
    string ip = 1;     // IP
    int32 port = 2;    // Port
    int32 endpoint_id = 3;    // 端点号
	//erlangMogai
}

///
/// 认证请求消息 。 device类型、id相当于一个校验的作用。
///
//ResponseType authenticate_s2c
message authenticate_c2s // IRequest
{
    int32 user_id = 1;     // 用户ID
    int32 device_type = 2; // 设备类型
    string device_product_id = 3;  // 设备产品ID
	//erlangMogai
}
message authenticate_s2c // IResponse 
{
	//erlangMogai
}

///
/// 心跳消息   定期30秒发一次。若30秒内没发
///
message heartbeat_c2s // IMessage 
{
	//erlangMogai
}

///
/// 全状态同步消息  
///
message all_sync_s2c // IMessage 
{
    int32 house_type = 1;  // 房间类型
    int32 music_id = 2;     // 正在放的音乐
    repeated int32 on_lighting_ids = 3; // 亮着的灯ID数组
    repeated int32 on_dj_ids = 4; // 有人的DJ位置ID数组
    repeated int32 dj_playerids = 5; // DJ玩家ID数组，顺序与on_dj_ids对应   playerid和userid是同一个id，一一对应。以后可能会分开。
    repeated player players = 6;    // 玩家状态数组 这是id
	//erlangMogai
}
message player 
{
    int32 player_id = 1;     // 玩家ID  todo考虑  合并仓库？
    float x = 2;   // 位置x：0-1
    float y = 3;   // 位置y：0-1
    int32 is_dj = 4;   // 是否DJ，0-否，其他-dj编号  2就表示站在2号dj位置上。
    float big_factor = 5;   // 放大因子   多个放大会累积相乘。
    int32 figure_id = 6;   // 形象id   
    string player_name = 7;
	//erlangMogai
}

///
/// 玩家进入消息
///
message player_enter_s2c   // IMessage
{
    player one_player = 1;     // 玩家状态
	//erlangMogai
}

///
/// 玩家离开消息
///
message player_leave_s2c // IMessage 
{
    int32 player_id = 1;     // 玩家ID
	//erlangMogai
}

///
/// 动作请求消息
///
//ResponseType action_req_s2c
message action_req_c2s   // IRequest
{
    int32 action_id = 1;    // 动作ID  后面约定下。
    int32 int1 = 2;    // 整型内容1
    int32 int2 = 3;    // 整型内容2
    float float1 = 4;    // 浮点型内容1
    float float2 = 5;    // 浮点型内容2
	//erlangMogai
}
message action_req_s2c // IResponse 
{ 
	// 这个不是广播的。
    int32 action_id = 1;    // 动作ID
    int32 int1 = 2;    // 整型内容1
    int32 int2 = 3;    // 整型内容2
    float float1 = 4;    // 浮点型内容1
    float float2 = 5;    // 浮点型内容2
	//erlangMogai
}

///
/// 动作同步消息
///
message action_syn_s2c // IMessage 
{
    int32 player_id = 1;     // 玩家ID
    int32 action_id = 2;    // 动作ID
    int32 int1 = 3;    // 整型内容1
    int32 int2 = 4;    // 整型内容2
    float float1 = 5;    // 浮点型内容1
    float float2 = 6;    // 浮点型内容2
	//erlangMogai
}



//ResponseType M2C_TestResponse
message C2M_TestRequest // IActorLocationRequest
{
	int32 RpcId = 90;
	string request = 1;
}

message M2C_TestResponse // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string response = 1;
}

//ResponseType Actor_TransferResponse
message Actor_TransferRequest // IActorLocationRequest
{
	int32 RpcId = 90;
	int32 MapIndex = 1;
}

message Actor_TransferResponse // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType G2C_EnterMap
message C2G_EnterMap // IRequest
{
	int32 RpcId = 1;
}

message G2C_EnterMap // IResponse
{
	int32 RpcId = 1;
	int32 Error = 2;
	string Message = 3;
	// 自己unitId
	int64 MyId = 4;
}

message MoveInfo
{
	repeated float X = 1;
	repeated float Y = 2;
	repeated float Z = 3;

	float A = 4;
	float B = 5;
	float C = 6;
	float W = 7;
	int32 TurnSpeed = 8;
}

message UnitInfo
{
	int64 UnitId = 1;
	int32 ConfigId = 2;
	int32 Type = 3;
	float X = 4;
	float Y = 5;
	float Z = 6;
	float ForwardX = 7;
	float ForwardY = 8;
	float ForwardZ = 9;
	repeated int32 Ks = 10;
	repeated int64 Vs = 11;
	MoveInfo MoveInfo = 12;
}

message M2C_CreateUnits // IActorMessage
{
	repeated UnitInfo Units = 2;
}

message M2C_CreateMyUnit // IActorMessage
{
	UnitInfo Unit = 1;
}

message M2C_StartSceneChange // IActorMessage
{
	int64 SceneInstanceId = 1;
	string SceneName = 2;	
}

message M2C_RemoveUnits // IActorMessage
{
	repeated int64 Units = 2;
}

message C2M_PathfindingResult // IActorLocationMessage
{
	int32 RpcId = 90;

	float X = 1;
	float Y = 2;
	float Z = 3;
}

message C2M_Stop // IActorLocationMessage
{
	int32 RpcId = 90;
}

message M2C_PathfindingResult // IActorMessage
{
	int64 Id = 1;

	float X = 2;
	float Y = 3;
	float Z = 4;

	repeated float Xs = 5;
	repeated float Ys = 6;
	repeated float Zs = 7;
}

message M2C_Stop // IActorMessage
{
	int32 Error = 1;

	int64 Id = 2;
	float X = 3;
	float Y = 4;
	float Z = 5;

	float A = 6;
	float B = 7;
	float C = 8;
	float W = 9;
}

//ResponseType G2C_Ping
message C2G_Ping // IRequest
{
	int32 RpcId = 90;
}

message G2C_Ping // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;

	int64 Time = 1;
}


message G2C_Test // IMessage
{
}

//ResponseType M2C_Reload
message C2M_Reload // IRequest
{
	int32 RpcId = 90;
	string Account = 1;
	string Password = 2;
}

message M2C_Reload // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

//ResponseType R2C_Login
message C2R_Login // IRequest
{
	int32 RpcId = 90;
	string  Account = 1;  // 帐号
	string  Password = 2;  // 密码
}

message R2C_Login // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	string Address = 1;
	int64 Key = 2;
	int64 GateId = 3;
}

//ResponseType G2C_LoginGate
message C2G_LoginGate // IRequest
{
	int32 RpcId = 90;
	int64 Key = 1;  // 帐号
	int64 GateId = 2;
}

message G2C_LoginGate // IResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	int64 PlayerId = 1;
}

message G2C_TestHotfixMessage // IMessage
{
	string Info = 1;
}

//ResponseType M2C_TestRobotCase
message C2M_TestRobotCase // IActorLocationRequest
{
	int32 RpcId = 90;
	int32 N = 1;
}

message M2C_TestRobotCase // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
	int32 N = 1;
}

//ResponseType M2C_TransferMap
message C2M_TransferMap // IActorLocationRequest
{
	int32 RpcId = 1;
}

message M2C_TransferMap // IActorLocationResponse
{
	int32 RpcId = 90;
	int32 Error = 91;
	string Message = 92;
}

